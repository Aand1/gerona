/**
\mainpage
\htmlinclude manifest.html

\b traversable_path provides nodes to classifiy the ground in front of the robot and follow the path,
the robot currently stands on.

<!-- 
Provide an overview of your package.
-->

\section TraversablePathIdentification Traversable Path Identification

Classifies the ground in front of the robot in traversable and untraversable areas, using a down tilted laser scanner.

Using the classification, the robot is navigated to follow the traversable path on which it currently stands.

This package is the result of the bachelor thesis of Felix Widmaier.

\subsection Requirements
 \li Laserscanner must be mounted on a pan-tilt-unit (at least the tilt is necessary)
 \li Laserscanner must provied intensity values

Should run without problems on thrain.


\section Nodes

There are seperate nodes for classification an navigation.

\subsection classify_terrain

Classifies the terrain in front of the robot.

\subsubsection RunNode Run node

To run the node, use the launchfile 'classify_terrain.launch'. This will set the required settings of the laser scanner.

\subsubsection PublishedTopics Published topics

 \li path_classification_cloud: Classification of the current scan. Published as Pointcloud2. Each point has a boolean 'traversable'.
 \li traversability_map: A littel map of the surrounding area of the robot. Messagetyp: OccupancyGrid. Beware: the map moves to ensure the robot does not leave it!

\subsubsection Parameters

Parameters for the classification can be changed with dynamic_reconfigure.

An alternative path to the laser calibration file can be set with the private parameter '_calibration_file'. Example:

<code>rosrun traversable_path classify_terrain _calibration_file:=/foo/bar/calibfile.yaml</code>

By default the file is placed in the packages directory.

\subsubsection CalibrateLaser Calibrate the Laser

If you change the lasers tilt angle or other settings of the laser, you have to recalibrate it. This is done by placing the robot on a plane and call the service 'calibrate_plane':

<code>rosservice call calibration_file</code>


\subsection follow_path

Follow the path, the robot currently stands on.

\subsubsection RunNode Run node

To run the node, use the launchfile 'follow_path.launch'. This also lauches classify_path, thus you do not have to start it yourself.

\subsubsection Parameters

The robots velocity can be changed with dynamic_reconfigure.


<!--
\section codeapi Code API
Provide links to specific auto-generated API documentation within your
package that is of particular interest to a reader. Doxygen will
document pretty much every part of your code, so do your best here to
point the reader to the actual API.

If your codebase is fairly large or has different sets of APIs, you
should use the doxygen 'group' tag to keep these APIs together. For
example, the roscpp documentation has 'libros' group.
-->


*/
